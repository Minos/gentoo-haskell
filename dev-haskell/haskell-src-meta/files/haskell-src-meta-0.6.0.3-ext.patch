diff --git a/src/Language/Haskell/Meta/Parse.hs b/src/Language/Haskell/Meta/Parse.hs
index 47da62b..30f4e9e 100644
--- a/src/Language/Haskell/Meta/Parse.hs
+++ b/src/Language/Haskell/Meta/Parse.hs
@@ -87,7 +87,7 @@ instance DefaultFixities a => DefaultFixities (Maybe a) where
   defaultFixities = Just defaultFixities
 
 myDefaultExtensions :: [Extension]
-myDefaultExtensions = [PostfixOperators
+myDefaultExtensions = upd [PostfixOperators
                       ,QuasiQuotes
                       ,UnicodeSyntax
                       ,PatternSignatures
@@ -97,6 +97,12 @@ myDefaultExtensions = [PostfixOperators
                       ,RankNTypes
                       ,MultiParamTypeClasses
                       ,RecursiveDo]
+  where
+#if MIN_VERSION_haskell_src_exts(0,14,0)
+    upd = map EnableExtension
+#else
+    upd = id
+#endif
 
 parseResultToEither :: ParseResult a -> Either String a
 parseResultToEither (ParseOk a) = Right a
diff --git a/src/Language/Haskell/Meta/Syntax/Translate.hs b/src/Language/Haskell/Meta/Syntax/Translate.hs
index 94300af..248817b 100644
--- a/src/Language/Haskell/Meta/Syntax/Translate.hs
+++ b/src/Language/Haskell/Meta/Syntax/Translate.hs
@@ -186,7 +186,11 @@ instance ToPat Hs.Pat where
   toPat (Hs.PInfixApp p n q)= InfixP (toPat p) (toName n) (toPat q)
 #endif
   toPat (Hs.PApp n ps) = ConP (toName n) (fmap toPat ps)
+#if MIN_VERSION_haskell_src_exts(0,14,0)
+  toPat (Hs.PTuple _ ps) = TupP (fmap toPat ps)
+#else
   toPat (Hs.PTuple ps) = TupP (fmap toPat ps)
+#endif
   toPat (Hs.PList ps) = ListP (fmap toPat ps)
 #if MIN_VERSION_template_haskell(2,7,0)  
   toPat (Hs.PParen p) = ParensP (toPat p)  
@@ -246,7 +250,11 @@ instance ToExp Hs.Exp where
   toExp (Hs.If a b c)              = CondE (toExp a) (toExp b) (toExp c)
   toExp (Hs.Do ss)                 = DoE (map toStmt ss)
   toExp e@(Hs.MDo _)               = noTH "toExp" e
+#if MIN_VERSION_haskell_src_exts(0,14,0)
+  toExp (Hs.Tuple _ xs)              = TupE (fmap toExp xs)
+#else
   toExp (Hs.Tuple xs)              = TupE (fmap toExp xs)
+#endif
   toExp (Hs.List xs)               = ListE (fmap toExp xs)
 #if MIN_VERSION_template_haskell(2,7,0)
   toExp (Hs.Paren e)               = ParensE (toExp e)
