commit 6c6d5b98bb98328a310bf2be98ba7b2ec9607d01
Author: Sergei Trofimovich <slyfox@gentoo.org>
Date:   Sun Oct 13 12:14:11 2013 +0300

    arithmoi: port to ghc-7.7
    
    Primitive comparison types now return 'Int#' instead of 'Bool'.
    But there is 'tagToEnum#' to get 'Bool' back.
    
    Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>

diff --git a/Math/NumberTheory/Utils.hs b/Math/NumberTheory/Utils.hs
index 4582061..680def6 100644
--- a/Math/NumberTheory/Utils.hs
+++ b/Math/NumberTheory/Utils.hs
@@ -34,6 +34,8 @@ import GHC.Integer.GMP.Internals
 
 import Data.Bits
 
+#include "ghc_compat.h"
+
 #if WORD_SIZE_IN_BITS == 64
 #define m5 0x5555555555555555
 #define m3 0x3333333333333333
@@ -81,7 +83,7 @@ shiftOCInteger :: Integer -> (Int, Integer)
 shiftOCInteger n@(S# i#) =
     case shiftToOddCount# (int2Word# i#) of
       (# z#, w# #)
-        | z# ==# 0# -> (0, n)
+        | TO_BOOL(z# ==# 0#) -> (0, n)
         | otherwise -> (I# z#, S# (word2Int# w#))
 shiftOCInteger n@(J# _ ba#) = case count 0# 0# of
                                  0#  -> (0, n)
diff --git a/arithmoi.cabal b/arithmoi.cabal
index ebe6803..835cef2 100644
--- a/arithmoi.cabal
+++ b/arithmoi.cabal
@@ -73,6 +73,7 @@ library
     extensions          : BangPatterns
     ghc-options         : -O2 -Wall
     ghc-prof-options    : -O2 -auto
+    include-dirs        : cinclude
 
 source-repository head
   type:     mercurial
diff --git a/cinclude/ghc_compat.h b/cinclude/ghc_compat.h
new file mode 100644
index 0000000..4b85f93
--- /dev/null
+++ b/cinclude/ghc_compat.h
@@ -0,0 +1,10 @@
+#if __GLASGOW_HASKELL__ > 706
+/*
+ * In this version ==# returns Int#, not Bool,
+ *-- thus we need to convert it manually with tagToEnum#.
+ *-- The idea is picked from happy package.
+ */
+#    define TO_BOOL(x) (tagToEnum# (x))
+#else
+#    define TO_BOOL(x) (x)
+#endif
diff --git a/Math/NumberTheory/GCD/LowLevel.hs b/Math/NumberTheory/GCD/LowLevel.hs
index a290372..dc7ccd6 100644
--- a/Math/NumberTheory/GCD/LowLevel.hs
+++ b/Math/NumberTheory/GCD/LowLevel.hs
@@ -33,6 +33,8 @@ import GHC.Word (Word(..))      -- Moved to GHC.Types
 
 import Math.NumberTheory.Utils
 
+#include "ghc_compat.h"
+
 -- | Greatest common divisor of two 'Int's, calculated with the binary gcd algorithm.
 gcdInt :: Int -> Int -> Int
 gcdInt (I# a#) (I# b#) = I# (gcdInt# a# b#)
@@ -66,15 +68,17 @@ gcdWord# a# b#  =
     case shiftToOddCount# a# of
       (# za#, oa# #) ->
         case shiftToOddCount# b# of
-          (# zb#, ob# #) -> gcdWordOdd# oa# ob# `uncheckedShiftL#` (if za# <# zb# then za# else zb#)
+          (# zb#, ob# #) -> gcdWordOdd# oa# ob# `uncheckedShiftL#` (if TO_BOOL(za# <# zb#) then za# else zb#)
 
 -- | Test whether two 'Word#'s are coprime.
 coprimeWord# :: Word# -> Word# -> Bool
 coprimeWord# a# b# =
-  (a# `eqWord#` 1## || b# `eqWord#` 1##)
-  || ((((a# `or#` b#) `and#` 1##) `eqWord#` 1##) -- not both even
-      && ((a# `neWord#` 0## && b# `neWord#` 0##) -- neither is zero
-      && gcdWordOdd# (shiftToOdd# a#) (shiftToOdd# b#) `eqWord#` 1##))
+     (   TO_BOOL(a# `eqWord#` 1##)
+      || TO_BOOL(b# `eqWord#` 1##))
+  || (   TO_BOOL(((a# `or#` b#) `and#` 1##) `eqWord#` 1##) -- not both even
+      && ((   TO_BOOL(a# `neWord#` 0##)
+           && TO_BOOL(b# `neWord#` 0##)) -- neither is zero
+          && TO_BOOL(gcdWordOdd# (shiftToOdd# a#) (shiftToOdd# b#) `eqWord#` 1##)))
 
 -- Various auxiliary functions
 
@@ -82,9 +86,10 @@ coprimeWord# a# b# =
 {-# INLINE gcdWordOdd# #-}
 gcdWordOdd# :: Word# -> Word# -> Word#
 gcdWordOdd# a# b#
-  | a# `eqWord#` 1## || b# `eqWord#` 1##  = 1##
-  | a# `eqWord#` b#                       = a#
-  | a# `ltWord#` b#                       = oddGCD# b# a#
+  |    TO_BOOL(a# `eqWord#` 1##)
+    || TO_BOOL(b# `eqWord#` 1##)          = 1##
+  | TO_BOOL(a# `eqWord#` b#)              = a#
+  | TO_BOOL(a# `ltWord#` b#)              = oddGCD# b# a#
   | otherwise                             = oddGCD# a# b#
 
 -- calculate the gcd of two odd numbers using the binary gcd algorithm
@@ -93,11 +98,11 @@ oddGCD# :: Word# -> Word# -> Word#
 oddGCD# a# b# =
     case shiftToOdd# (a# `minusWord#` b#) of
       1## -> 1##
-      c#  | c# `ltWord#` b# -> oddGCD# b# c#
-          | c# `gtWord#` b# -> oddGCD# c# b#
-          | otherwise       -> c#
+      c#  | TO_BOOL(c# `ltWord#` b#) -> oddGCD# b# c#
+          | TO_BOOL(c# `gtWord#` b#) -> oddGCD# c# b#
+          | otherwise                -> c#
 
 absInt# :: Int# -> Int#
 absInt# i#
-  | i# <# 0#    = negateInt# i#
-  | otherwise   = i#
+  | TO_BOOL(i# <# 0#) = negateInt# i#
+  | otherwise         = i#
diff --git a/Math/NumberTheory/Logarithms.hs b/Math/NumberTheory/Logarithms.hs
index a66ba32..027baac 100644
--- a/Math/NumberTheory/Logarithms.hs
+++ b/Math/NumberTheory/Logarithms.hs
@@ -35,6 +35,8 @@ import Data.Array.Base (unsafeAt)
 import Math.NumberTheory.Logarithms.Internal
 import Math.NumberTheory.Powers.Integer
 
+#include "ghc_compat.h"
+
 -- | Calculate the integer logarithm for an arbitrary base.
 --   The base must be greater than 1, the second argument, the number
 --   whose logarithm is sought, must be positive, otherwise an error is thrown.
@@ -65,14 +67,14 @@ integerLog2 n
 --   The argument must be positive, otherwise an error is thrown.
 intLog2 :: Int -> Int
 intLog2 (I# i#)
-  | i# <# 1#    = error "Math.NumberTheory.Logarithms.intLog2: argument must be positive"
+  | TO_BOOL(i# <# 1#)    = error "Math.NumberTheory.Logarithms.intLog2: argument must be positive"
   | otherwise   = I# (wordLog2# (int2Word# i#))
 
 -- | Calculate the integer logarithm of a 'Word' to base 2.
 --   The argument must be positive, otherwise an error is thrown.
 wordLog2 :: Word -> Int
 wordLog2 (W# w#)
-  | w# `eqWord#` 0##    = error "Math.NumberTheory.Logarithms.wordLog2: argument must not be 0."
+  | TO_BOOL(w# `eqWord#` 0##) = error "Math.NumberTheory.Logarithms.wordLog2: argument must not be 0."
   | otherwise           = I# (wordLog2# w#)
 
 -- | Same as 'integerLog2', but without checks, saves a little time when
diff --git a/Math/NumberTheory/Powers/Cubes.hs b/Math/NumberTheory/Powers/Cubes.hs
index 0de4273..63c5247 100644
--- a/Math/NumberTheory/Powers/Cubes.hs
+++ b/Math/NumberTheory/Powers/Cubes.hs
@@ -33,6 +33,8 @@ import GHC.Integer.GMP.Internals
 
 import Math.NumberTheory.Logarithms.Internal (integerLog2#)
 
+#include "ghc_compat.h"
+
 -- | Calculate the integer cube root of an integer @n@,
 --   that is the largest integer @r@ such that @r^3 <= n@.
 --   Note that this is not symmetric about @0@, for example
@@ -194,7 +196,7 @@ appCuRt :: Integer -> Integer
 appCuRt (S# i#) = case double2Int# (int2Double# i# **## (1.0## /## 3.0##)) of
                     r# -> S# r#
 appCuRt n@(J# s# _)
-    | s# <# THRESH#  = floor (fromInteger n ** (1.0/3.0) :: Double)
+    | TO_BOOL(s# <# THRESH#) = floor (fromInteger n ** (1.0/3.0) :: Double)
     | otherwise = case integerLog2# n of
                     l# -> case (l# `quotInt#` 3#) -# 51# of
                             h# -> case shiftRInteger n (3# *# h#) of
diff --git a/Math/NumberTheory/Powers/Fourth.hs b/Math/NumberTheory/Powers/Fourth.hs
index 7b1dba4..d84eca3 100644
--- a/Math/NumberTheory/Powers/Fourth.hs
+++ b/Math/NumberTheory/Powers/Fourth.hs
@@ -35,6 +35,8 @@ import Data.Word
 
 import Math.NumberTheory.Logarithms.Internal (integerLog2#)
 
+#include "ghc_compat.h"
+
 -- | Calculate the integer fourth root of a nonnegative number,
 --   that is, the largest integer @r@ with @r^4 <= n@.
 --   Throws an error on negaitve input.
@@ -137,7 +139,7 @@ approxBiSqrt = fromInteger . appBiSqrt . fromIntegral
 appBiSqrt :: Integer -> Integer
 appBiSqrt (S# i#) = S# (double2Int# (sqrtDouble# (sqrtDouble# (int2Double# i#))))
 appBiSqrt n@(J# s# _)
-    | s# <# THRESH# = floor (sqrt . sqrt $ fromInteger n :: Double)
+    | TO_BOOL(s# <# THRESH#) = floor (sqrt . sqrt $ fromInteger n :: Double)
     | otherwise = case integerLog2# n of
                     l# -> case uncheckedIShiftRA# l# 2# -# 47# of
                             h# -> case shiftRInteger n (4# *# h#) of
diff --git a/Math/NumberTheory/Powers/General.hs b/Math/NumberTheory/Powers/General.hs
index 22a8549..a002586 100644
--- a/Math/NumberTheory/Powers/General.hs
+++ b/Math/NumberTheory/Powers/General.hs
@@ -40,6 +40,8 @@ import qualified Math.NumberTheory.Powers.Squares as P2
 import qualified Math.NumberTheory.Powers.Cubes as P3
 import qualified Math.NumberTheory.Powers.Fourth as P4
 
+#include "ghc_compat.h"
+
 -- | Calculate an integer root, @'integerRoot' k n@ computes the (floor of) the @k@-th
 --   root of @n@, where @k@ must be positive.
 --   @r = 'integerRoot' k n@ means @r^k <= n < (r+1)^k@ if that is possible at all.
@@ -220,7 +222,7 @@ appKthRoot k@(I# k#) n@(J# _ _) =
               1# -> 3
               2# -> 5
               3# -> 11
-              h# | h# <# 500# ->
+              h# | TO_BOOL(h# <# 500#) ->
                    floor (scaleFloat (I# (h# -# 1#))
                           (fromInteger (n `shiftRInteger` (h# *# k# -# k#)) ** (1/fromIntegral k) :: Double))
                  | otherwise ->
diff --git a/Math/NumberTheory/Powers/Integer.hs b/Math/NumberTheory/Powers/Integer.hs
index ba778a3..954af16 100644
--- a/Math/NumberTheory/Powers/Integer.hs
+++ b/Math/NumberTheory/Powers/Integer.hs
@@ -8,7 +8,7 @@
 --
 -- Slightly faster power function for Integer base and Int exponent.
 --
-{-# LANGUAGE MagicHash, BangPatterns #-}
+{-# LANGUAGE CPP, MagicHash, BangPatterns #-}
 {-# OPTIONS_HADDOCK hide #-}
 module Math.NumberTheory.Powers.Integer
     ( integerPower
@@ -18,6 +18,8 @@ import GHC.Base
 
 import Math.NumberTheory.Logarithms.Internal ( wordLog2# )
 
+#include "ghc_compat.h"
+
 -- | Power of an 'Integer' by the left-to-right repeated squaring algorithm.
 --   This needs two multiplications in each step while the right-to-left
 --   algorithm needs only one multiplication for 0-bits, but here the
@@ -25,16 +27,16 @@ import Math.NumberTheory.Logarithms.Internal ( wordLog2# )
 --   gains a bit.
 integerPower :: Integer -> Int -> Integer
 integerPower b (I# e#)
-  | e# ==# 0#   = 1
-  | e# ==# 1#   = b
-  | otherwise   = go (wordLog2# w# -# 1#) b (b*b)
+  | TO_BOOL(e# ==# 0#)   = 1
+  | TO_BOOL(e# ==# 1#)   = b
+  | otherwise            = go (wordLog2# w# -# 1#) b (b*b)
     where
       !w# = int2Word# e#
-      go 0# l h = if (w# `and#` 1##) `eqWord#` 0## then l*l else (l*h)
+      go 0# l h = if TO_BOOL((w# `and#` 1##) `eqWord#` 0##) then l*l else (l*h)
       go i# l h
         | w# `hasBit#` i#   = go (i# -# 1#) (l*h) (h*h)
         | otherwise         = go (i# -# 1#) (l*l) (l*h)
 
 -- | A raw version of testBit for 'Word#'.
 hasBit# :: Word# -> Int# -> Bool
-hasBit# w# i# = ((w# `uncheckedShiftRL#` i#) `and#` 1##) `neWord#` 0##
+hasBit# w# i# = TO_BOOL(((w# `uncheckedShiftRL#` i#) `and#` 1##) `neWord#` 0##)
diff --git a/Math/NumberTheory/Powers/Squares.hs b/Math/NumberTheory/Powers/Squares.hs
index 667000b..2fe04b2 100644
--- a/Math/NumberTheory/Powers/Squares.hs
+++ b/Math/NumberTheory/Powers/Squares.hs
@@ -36,6 +36,8 @@ import Data.Bits
 import Data.Word        -- Moved to GHC.Types
 #endif
 
+#include "ghc_compat.h"
+
 import Math.NumberTheory.Logarithms.Internal (integerLog2#)
 
 
@@ -191,7 +193,7 @@ heron n a = go (step a)
 appSqrt :: Integer -> Integer
 appSqrt (S# i#) = S# (double2Int# (sqrtDouble# (int2Double# i#)))
 appSqrt n@(J# s# _)
-    | s# <# THRESH# = floor (sqrt $ fromInteger n :: Double)
+    | TO_BOOL(s# <# THRESH#) = floor (sqrt $ fromInteger n :: Double)
     | otherwise = case integerLog2# n of
                     l# -> case uncheckedIShiftRA# l# 1# -# 47# of
                             h# -> case shiftRInteger n (2# *# h#) of
diff --git a/Math/NumberTheory/Primes/Testing/Probabilistic.hs b/Math/NumberTheory/Primes/Testing/Probabilistic.hs
index c4e68ec..c5c9d8f 100644
--- a/Math/NumberTheory/Primes/Testing/Probabilistic.hs
+++ b/Math/NumberTheory/Primes/Testing/Probabilistic.hs
@@ -32,6 +32,8 @@ import GHC.Word     -- Moved to GHC.Types
 #endif
 import GHC.Integer.GMP.Internals
 
+#include "ghc_compat.h"
+
 -- | @'isPrime' n@ tests whether @n@ is a prime (negative or positive).
 --   First, trial division by the primes less than @1200@ is performed.
 --   If that hasn't determined primality or compositeness, a Baillie PSW
@@ -203,7 +205,7 @@ testLucas n q (J# s# ba#) = test (s# -# 1#)
       | testBit w i = go j# w (i - 1) 1 1 1 q
       | otherwise   = look j# w (i-1)
     go k# w i un un1 vn qn
-      | i < 0       = if k# <# 0#
+      | i < 0       = if TO_BOOL(k# <# 0#)
                          then (un,vn,qn)
                          else go (k# -# 1#) (W# (indexWordArray# ba# k#)) (WORD_SIZE_IN_BITS - 1) un un1 vn qn
       | testBit w i = go k# w (i-1) u2n1 u2n2 v2n1 q2n1
